class Heap:
    def __init__(self):
        self.heap = []

    def push(self, value):
        self.heap.append(value)
        index_of_value = len(self.heap) - 1
        self.__swap_up(index_of_value)
        print(self.heap)

    def pop(self):
        if len(self.heap) == 0:
            raise IndexError('pop from empty heap')

        smallest_value_in_heap = self.heap[0]

        self.heap[0] = self.heap[-1]
        self.__swap_down(0)

        print(self.heap)

        return smallest_value_in_heap

    def __swap_up(self, child_index):
        while child_index > 0:
            parent_index, parent_value = self.__get_parent(child_index)
            child_value = self.heap[child_index]

            if parent_value <= child_value:
                break

            self.heap[parent_index] = child_value
            self.heap[child_index] = parent_value

            child_index = parent_index

    def __swap_down(self, parent_index):
        while True:
            parent_value = self.heap[parent_index]

            new_parent_index, new_parent_value = self.__get_child_to_swap_with(parent_index)

            if new_parent_index is None or new_parent_value is None:
              del self.heap[-1]
              break

            self.heap[new_parent_index] = parent_value
            self.heap[parent_index] = new_parent_value

            parent_index = new_parent_index

    def __get_child_to_swap_with(self, parent_index):
            # the child we want to swap with is a child with a smaller value

            parent_value = self.heap[parent_index]

            left_child_index, left_child_value = self.__get_left_child(parent_index, parent_value)
            right_child_index, right_child_value = self.__get_right_child(parent_index, parent_value)

            if parent_value <= left_child_value and parent_value <= right_child_value:
                # No point in swapping if parent_value <= child_value
                return None, None

            # Check which one is the smaller value, right child or left child?
            if left_child_value < right_child_value:
                new_parent_index = left_child_index
            else:
                new_parent_index = right_child_index

            # new parent value will be the child with a smaller value than
            # the current parent
            new_parent_value = self.heap[new_parent_index]

            return new_parent_index, new_parent_value


    def __get_parent(self, index):
        if index == 0:
            return None, None

        parent_index = (index - 1) // 2

        return parent_index, self.heap[parent_index]

    def __get_left_child(self, index, default_value):
        left_child_index = 2 * index + 1

        if left_child_index > len(self.heap) - 1:
            return None, default_value

        return left_child_index, self.heap[left_child_index]

    def __get_right_child(self, index, default_value):
        right_child_index = 2 * index + 2

        if right_child_index > len(self.heap) - 1:
            return None, default_value

        return right_child_index, self.heap[right_child_index]
